# User type definition
type User {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  address: String!
  billing_address: String
  code: String!
  place: String!
  internal_cost_center: String
  profile_image: String
  password: String!
  createdAt: String!
  updatedAt: String!
}

# AuthPayload type to return user and token after login
type AuthPayload {
  token: String!
  user: User!
}

type UserPasswordResponse {
  id: ID!
}

# Input type for registering a new user
input RegisterInput {
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  address: String!
  billing_address: String
  code: String!
  place: String!
  internal_cost_center: String
  password: String!
}

input UpdateInput {
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  address: String!
  billing_address: String!
  code: String!
  place: String!
  internal_cost_center: String!
  profile_image: String
}

input UpdatePasswordInput {
  current_password: String!
  new_password: String!
}

# Input type for user login
input LoginInput {
  email: String!
  password: String!
}

# Query type for fetching user
type Query {
  getAnUser: User!
}

# Query type for fetching users (optional)
# type Query {
#   users: [User!]!
#   user(id: ID!): User
# }

# Mutation type for user registration and login
type Mutation {
  registerAnUser(inputData: RegisterInput!): AuthPayload!
  loginAnUser(inputData: LoginInput!): AuthPayload!
  updateAnUser(inputData: UpdateInput!): User!
  updateUserPassword(inputData: UpdatePasswordInput): UserPasswordResponse!
}
